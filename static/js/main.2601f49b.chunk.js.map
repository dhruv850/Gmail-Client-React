{"version":3,"sources":["Components/MailboxList/SendModel.js","Components/MailboxList/MailboxList.js","Components/Helper.js","Components/EmailList/EmailList.js","Components/Email/ReplyModel.js","Components/Email/ForwardModel.js","Components/Email/Email.js","App.js","index.js"],"names":["SendModel","dropzoneRef","useState","attachments","setattachments","setdropzoneActive","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","message","callback","email","h","push","test","length","i","type","name","btoa","blob","s","join","unescape","encodeURIComponent","replace","request","window","gapi","client","gmail","users","messages","send","userId","resource","raw","execute","displayToast","result","labelIds","indexOf","title","description","status","duration","isClosable","Button","w","leftIcon","BsPlusCircle","borderRadius","variant","variantColor","onClick","Modal","size","closeOnOverlayClick","padding","id","onSubmit","e","preventDefault","form","target","emailTo","elements","value","subject","To","Subject","FormControl","isRequired","Input","placeholder","aria-describedby","Textarea","minH","resize","FormGroup","Box","disableClick","style","position","onDrop","files","dropzoneActive","reader","FileReader","onload","readAsBinaryString","onDragEnter","onDragLeave","ref","node","top","right","bottom","left","textAlign","ListGroup","Text","fontSize","marginTop","map","file","index","as","ListGroupItem","key","listItem","filesize","filter","item","removeAttachment","className","mr","open","MailboxList","getMessages","resetstate","getMessagesQuery","active","setActive","handleClick","categoryId","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","MdStar","MdLabel","FiSend","FiFile","MdPeople","MdLoyalty","prototype","PropTypes","func","getHeader","headers","header","find","undefined","isEmpty","obj","hasOwnProperty","removeQuote","str","EmailList","getOneMessage","loadMore","handleMessageClick","messageId","currentTarget","getAttribute","query","state","setState","Flex","direction","wrap","color","InputGroup","IconButton","marginLeft","aria-label","icon","borderWidth","focusBorderColor","onChange","event","console","log","mt","display","align","Spinner","thickness","speed","emptyColor","overflowY","payload","split","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","justify","borderTop","borderBottom","cursor","Avatar","src","isTruncated","fontWeight","width","array","ReplyModel","replayData","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","object","ForwardModel","forwardData","getMessageBody","MdArrowForward","getForwardHead","Email","React","useEffect","addToFrame","getElementById","contentWindow","body","encodedBody","parts","data","getHTMLPart","Base64","decode","arr","htmlPart","plainPart","x","mimeType","borderTopRightRadius","borderBottomRightRadius","mb","replayTo","replaySubject","formatReplayData","getAttachments","part","attachmentId","MdArchive","ids","batchModify","removeLabelIds","then","resp","catch","error","trash","flexGrow","wordBreak","strDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","formatDate","AspectRatioBox","ratio","marginBottom","ButtonGroup","vertical","slice","filename","get","response","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","saveAs","downloadAttachment","App","setMessages","setMessage","mailLimit","setMailLimit","setcategoryId","load","setApiKey","process","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","hideAuthBtn","loadClient","displayAuthBtn","res","err","list","maxResults","getMessagesData","forEach","q","ThemeProvider","CSSReset","modify","addLabelIds","markMessageAsRead","ReactDOM","render"],"mappings":"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","file":"static/js/main.2601f49b.chunk.js","sourcesContent":["import React, { Fragment,useState } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { BsPlusCircle } from \"react-icons/bs\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n  Box,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport {FormGroup,ListGroup,ListGroupItem} from \"react-bootstrap\";\r\nimport Dropzone from 'react-dropzone';\r\nimport { render } from \"react-dom\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport filesize from 'filesize'\r\n\r\n\r\nconst SendModel = () => {\r\n  const [attachments,setattachments] = useState([]);\r\n  const [dropzoneActive,setdropzoneActive] = useState(false);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Simple Mail && Display Toast\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      message,\r\n      displayToast,\r\n      attachments,\r\n      \r\n    );\r\n\r\n    onClose();\r\n  };\r\n \r\n  var onDrop = (files) => {\r\n    setdropzoneActive({dropzoneActive: false});\r\n    for (let i = 0; i < files.length; i++) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setattachments((attachments) => \r\n          [\r\n            ...attachments,\r\n            {\r\n              name: files[i].name,\r\n              size: files[i].size,\r\n              type: files[i].type,\r\n              blob: reader.result\r\n            }\r\n          ]\r\n        )\r\n      };\r\n      reader.readAsBinaryString(files[i]);\r\n    }\r\n  }\r\n\r\n var removeAttachment =(file) => {\r\n    setattachments(\r\n      attachments.filter(item => item !== file)\r\n    )\r\n  }\r\n  \r\n \r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = [\r\n      'Content-Type: multipart/mixed; boundary=\"my_boundary\"',\r\n      'MIME-Version: 1.0'\r\n    ];\r\n    for (let h in headers_obj) {\r\n      email.push(`${h}: ${headers_obj[h]}`)\r\n    }\r\n\r\n    email.push(\r\n      '',\r\n      '--my_boundary'\r\n    );\r\n\r\n    if(!/^\\s*$/.test(message)) {\r\n      email.push(\r\n        'Content-Type: text/plain; charset=\"UTF-8\"',\r\n        'MIME-Version: 1.0',\r\n        'Content-Transfer-Encoding: 7bit',\r\n        '',\r\n        `${message}`,\r\n        '',\r\n        '--my_boundary'\r\n      )\r\n    }\r\n\r\n    if (attachments.length > 0) {\r\n      for (let i = 0; i < attachments.length; i++) {\r\n        email.push(\r\n          `Content-Type: ${attachments[i].type}`,\r\n          'MIME-Version: 1.0',\r\n          'Content-Transfer-Encoding: base64',\r\n          `Content-Disposition: attachment; filename=\"${attachments[i].name}\"`,\r\n          '',\r\n          btoa(attachments[i].blob),\r\n          '',\r\n          '--my_boundary'\r\n        )\r\n      }\r\n    }\r\n\r\n    const encode = (s) => btoa(unescape(encodeURIComponent(s))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n\r\n    email = encode(email.join('\\r\\n') + '--');\r\n\r\n    \r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: email,\r\n      },\r\n    });\r\n    setattachments([]);\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        description: \"We've Sent your email.\",\r\n        status: \"success\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your email.\",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n  var dropzoneRef;\r\n\r\n  const dropzoneOverlayStyle = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    padding: '2.5em 0',\r\n    \r\n    textAlign: 'center',\r\n    \r\n  };\r\n  \r\n \r\n  return (\r\n      \r\n    <Fragment>\r\n      <Button\r\n        w='100%'\r\n        h='48px'\r\n        leftIcon={BsPlusCircle}\r\n        borderRadius='20px'\r\n        variant='solid'\r\n        variantColor='blue'\r\n        // border='1px'\r\n        // borderColor='green.500'\r\n        // variantColor='green'\r\n        // variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        New Message\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='full'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n        padding=\"10px 10px 10px 10px\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>New Message</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n              <FormGroup>\r\n                <Box >\r\n              <Dropzone\r\n\r\n              disableClick\r\n              style={{position: \"relative\"}}\r\n              onDrop={onDrop}\r\n              onDragEnter={() => setdropzoneActive({dropzoneActive: true})}\r\n              onDragLeave={() => setdropzoneActive({dropzoneActive: false})}\r\n              ref={(node) => {\r\n                dropzoneRef = node;\r\n              }}\r\n            > \r\n             {attachments.length>0? (\"\"):(<div style={dropzoneOverlayStyle}>\r\n            You can also Drop Files Here\r\n            </div>)}\r\n            </Dropzone>\r\n            </Box>\r\n            </FormGroup>\r\n            <ListGroup >\r\n               <Text fontSize=\"xl\">Attachments:</Text>\r\n               <Box marginTop=\"10px\" >\r\n            {attachments.map((file, index) => (\r\n              <Text as=\"ins\" marginTop=\"3px\" >\r\n              <ListGroupItem  key={index} listItem={true}>\r\n                {file.name} ({filesize(file.size)})\r\n                <Button\r\n                  onClick={() => removeAttachment(file)}\r\n                  className='btn-link badge close'\r\n                >\r\n                  &times;\r\n                </Button>\r\n              </ListGroupItem>\r\n               </Text>\r\n            )\r\n           \r\n            )}\r\n            </Box>\r\n          </ListGroup>\r\n         \r\n\r\n            </ModalBody>\r\n            \r\n            <ModalFooter>\r\n              \r\n            <Button variantColor='blue' mr={3} variant=\"outline\" onClick={() => {\r\n              dropzoneRef.open()\r\n            }}>\r\n              Attach Files\r\n            </Button>\r\n           \r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n\r\n};\r\n\r\nexport default SendModel;\r\n","import React, { useState,useEffect } from \"react\";\r\nimport SendModel from \"./SendModel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\r\nimport { FiSend, FiFile } from \"react-icons/fi\";\r\n\r\nconst MailboxList = ({ getMessages,resetstate,getMessagesQuery}) => {\r\n  const [active, setActive] = useState(\"INBOX\");\r\n \r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const categoryId = e.target.id;\r\n    setActive(categoryId);\r\n    resetstate();\r\n    // Get Messages using clicked category\r\n    getMessages(categoryId);\r\n    \r\n  };\r\n\r\n  const handleClickunread = (e) => {\r\n    e.preventDefault();\r\n    const categoryId = e.target.id;\r\n    setActive(categoryId);\r\n    resetstate();\r\n    // Get Messages using clicked category\r\n    getMessagesQuery(categoryId);\r\n    \r\n  };\r\n\r\n\r\n\r\n \r\n  return (\r\n    <Box\r\n      w='16%'\r\n      h='100%'\r\n      bg='white'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopLeftRadius='md'\r\n      borderBottomLeftRadius='md'\r\n    >\r\n      <List>\r\n        {/* Send Model */}\r\n        <ListItem p='0.5rem 1rem 1rem'>\r\n          <SendModel />\r\n        </ListItem>\r\n\r\n        {/* Labels Buttons */}\r\n        <ListItem>\r\n          <Button\r\n            id='INBOX'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdInbox}\r\n            variantColor='blue'\r\n            variant={active === \"INBOX\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Inbox\r\n          </Button>\r\n          <ListItem>\r\n          <Button\r\n            id='is:unread'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdStar}\r\n            variantColor='blue'\r\n            variant={active === \"is:unread\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClickunread}\r\n          >\r\n            Unread\r\n          </Button>\r\n        </ListItem>\r\n          \r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='STARRED'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdStar}\r\n            variantColor='blue'\r\n            variant={active === \"STARRED\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Starred\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='IMPORTANT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLabel}\r\n            variantColor='blue'\r\n            variant={active === \"IMPORTANT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Important\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='SENT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiSend}\r\n            variantColor='blue'\r\n            variant={active === \"SENT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Sent\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='DRAFT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiFile}\r\n            variantColor='blue'\r\n            variant={active === \"DRAFT\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Drafts\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='TRASH'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon='delete'\r\n            variantColor='blue'\r\n            variant={active === \"TRASH\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Trash\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_SOCIAL'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdPeople}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_SOCIAL\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Social\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_PROMOTIONS'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLoyalty}\r\n            variantColor='blue'\r\n            variant={active === \"CATEGORY_PROMOTIONS\" ? \"solid\" : \"ghost\"}\r\n            justifyContent='flxex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Promotions\r\n          </Button>\r\n        </ListItem>\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nMailboxList.prototype = {\r\n  getMessages: PropTypes.func.isRequired,\r\n  resetstate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MailboxList;\r\n","export const getHeader = (headers, name) => {\r\n  const header = headers.find((header) => header.name === name);\r\n  return header !== undefined ? header.value : undefined;\r\n};\r\n\r\nexport const isEmpty = (obj) => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const decodeHtml = (html) => {\r\n  let txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const removeQuote = (str) => {\r\n  return str.replace(/['\"]+/g, \"\");\r\n};\r\n\r\nexport const formatDate = (strDate) => {\r\n  const date = new Date(strDate);\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"numeric\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  };\r\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n};\r\n\r\nexport const markMessageAsRead = (messageId) => {\r\n  window.gapi.client.gmail.users.messages.modify({\r\n    userId: 'me',\r\n    id: messageId,\r\n    resource: {\r\n      addLabelIds: [],\r\n      removeLabelIds: ['UNREAD']\r\n    }\r\n  }).execute();\r\n};\r\n","import React,{useState} from \"react\";\r\nimport { getHeader, isEmpty, decodeHtml, removeQuote } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Icon,\r\n  IconButton,\r\n  Avatar,\r\n  Text,\r\n  Spinner,\r\n  Button\r\n} from \"@chakra-ui/core\";\r\n\r\n\r\nconst EmailList = ({ getOneMessage, messages,loadMore,getMessagesQuery  }) => {\r\n  const handleMessageClick = (e) => {\r\n    const messageId = e.currentTarget.getAttribute(\"id\");\r\n    getOneMessage(messageId);\r\n    //console.log(messageId);\r\n  };\r\n  const handlequery = () => {\r\n    \r\n    getMessagesQuery(query);\r\n    setState({query:''})\r\n    //console.log(messageId);\r\n  };\r\n  \r\n  const [state, setState] = useState({\r\n    query: '',\r\n});\r\n\r\nconst { query } = state;\r\n\r\n// onchange event handler\r\nconst handleChange = name => event => {\r\n    // console.log('name', name, 'event', event.target.value);\r\n    setState({ ...state, [name]: event.target.value });\r\n    var query = event.target.value;\r\n    console.log(query)\r\n};\r\n  \r\n  \r\n\r\n  return (\r\n    <Flex\r\n      \r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='26%'\r\n      h='100%'\r\n      bg='#f1f1f1'\r\n      color='black'\r\n    >\r\n      {/* Search bar */}\r\n      <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n        <InputGroup size='lg'>\r\n        <IconButton variant='outline' marginLeft=\"5px\" variantColor=\"blue\" aria-label=\"Search database\" icon=\"search\" onClick={handlequery} />\r\n          <Input\r\n            type='text'\r\n            marginLeft=\"5px\"\r\n            placeholder='Search mail'\r\n            borderWidth='0px'\r\n            borderRadius='0px'\r\n            focusBorderColor='white'\r\n            onChange={handleChange('query')}\r\n            value={query}\r\n          />\r\n        </InputGroup>\r\n      </Box>\r\n\r\n      {/* Message List */}\r\n      {isEmpty(messages) ? (\r\n        <Box mt={6} display='flex' align='center' justifyContent='center'>\r\n          <Spinner\r\n            thickness='4px'\r\n            speed='0.65s'\r\n            emptyColor='gray.200'\r\n            color='blue.500'\r\n            size='xl'\r\n          />\r\n        </Box>\r\n      ) : (\r\n        <Box overflowY='auto'>\r\n          {messages.map((message) => {\r\n            const name = removeQuote(\r\n              getHeader(message.payload.headers, \"From\").split(\"<\")[0]\r\n            );\r\n            const subject = getHeader(message.payload.headers, \"Subject\");\r\n            const msg = decodeHtml(message.snippet.substr(0, 75));\r\n            const backgroundColor =\r\n              message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\r\n\r\n            return (\r\n              <Flex\r\n                key={message.id}\r\n                id={message.id}\r\n                onClick={handleMessageClick}\r\n                \r\n                wrap='no-wrap'\r\n                justify='space-around'\r\n                py={2}\r\n                bg={backgroundColor}\r\n                borderTop='1px'\r\n                borderBottom='1px'\r\n                borderColor='gray.300'\r\n                cursor='pointer'\r\n              >\r\n                <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\r\n                <Box w='80%'>\r\n                  <Text fontSize='sm' color='gray.700' isTruncated>\r\n                    {name}\r\n                  </Text>\r\n                  <Text\r\n                    fontSize='md'\r\n                    fontWeight='bold'\r\n                    color='#3182ce'\r\n                    isTruncated\r\n                  >\r\n                    {subject}\r\n                  </Text>\r\n                  <Text fontSize='xs' color='gray.500'>\r\n                    {msg}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n            );\r\n          })}\r\n           <Button width=\"100%\"\r\n              variantColor='teal'\r\n              variant='outline'\r\n              onClick={() => loadMore()}>\r\n              Load More...\r\n            </Button>\r\n        </Box>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n\r\nEmailList.prototype = {\r\n  \r\n  getOneMessage: PropTypes.func.isRequired,\r\n  messages: PropTypes.array.isRequired,\r\n};\r\n","import React, { Fragment,useState } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay } from \"react-icons/md\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n  Box,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport {FormGroup,ListGroup,ListGroupItem} from \"react-bootstrap\";\r\nimport Dropzone from 'react-dropzone';\r\nimport { render } from \"react-dom\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport filesize from 'filesize'\r\n\r\n\r\nconst ReplyModel = ({ replayData }) => {\r\n  const [attachments,setattachments] = useState([]);\r\n  const [dropzoneActive,setdropzoneActive] = useState(false);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n        \"In-Reply-To\": replayMsgId,\r\n      },\r\n      message,\r\n      displayToast,\r\n      attachments\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = [\r\n      'Content-Type: multipart/mixed; boundary=\"my_boundary\"',\r\n      'MIME-Version: 1.0'\r\n    ];\r\n    for (let h in headers_obj) {\r\n      email.push(`${h}: ${headers_obj[h]}`)\r\n    }\r\n\r\n    email.push(\r\n      '',\r\n      '--my_boundary'\r\n    );\r\n\r\n    if(!/^\\s*$/.test(message)) {\r\n      email.push(\r\n        'Content-Type: text/plain; charset=\"UTF-8\"',\r\n        'MIME-Version: 1.0',\r\n        'Content-Transfer-Encoding: 7bit',\r\n        '',\r\n        `${message}`,\r\n        '',\r\n        '--my_boundary'\r\n      )\r\n    }\r\n\r\n    if (attachments.length > 0) {\r\n      for (let i = 0; i < attachments.length; i++) {\r\n        email.push(\r\n          `Content-Type: ${attachments[i].type}`,\r\n          'MIME-Version: 1.0',\r\n          'Content-Transfer-Encoding: base64',\r\n          `Content-Disposition: attachment; filename=\"${attachments[i].name}\"`,\r\n          '',\r\n          btoa(attachments[i].blob),\r\n          '',\r\n          '--my_boundary'\r\n        )\r\n      }\r\n    }\r\n\r\n    const encode = (s) => btoa(unescape(encodeURIComponent(s))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n\r\n    email = encode(email.join('\\r\\n') + '--');\r\n\r\n    \r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: email,\r\n      },\r\n    });\r\n    setattachments([]);\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  var onDrop = (files) => {\r\n    setdropzoneActive({dropzoneActive: false});\r\n    for (let i = 0; i < files.length; i++) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setattachments((attachments) => \r\n          [\r\n            ...attachments,\r\n            {\r\n              name: files[i].name,\r\n              size: files[i].size,\r\n              type: files[i].type,\r\n              blob: reader.result\r\n            }\r\n          ]\r\n        )\r\n      };\r\n      reader.readAsBinaryString(files[i]);\r\n    }\r\n  }\r\n  var removeAttachment =(file) => {\r\n    setattachments(\r\n      attachments.filter(item => item !== file)\r\n    )\r\n  }\r\n  var dropzoneRef;\r\n\r\n  const dropzoneOverlayStyle = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    padding: '2.5em 0',\r\n    \r\n    textAlign: 'center',\r\n    \r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdReplay}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n       Reply\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='full'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Reply Email </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <Input\r\n                type='hidden'\r\n                id='reply-message-id'\r\n                value={replayData.msgId}\r\n                readOnly\r\n              />\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                  value={replayData.to}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={replayData.subject}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n              <FormGroup>\r\n                <Box >\r\n              <Dropzone\r\n\r\n              disableClick\r\n              style={{position: \"relative\"}}\r\n              onDrop={onDrop}\r\n              onDragEnter={() => setdropzoneActive({dropzoneActive: true})}\r\n              onDragLeave={() => setdropzoneActive({dropzoneActive: false})}\r\n              ref={(node) => {\r\n                dropzoneRef = node;\r\n              }}\r\n            > \r\n             {attachments.length>0? (\"\"):(<div style={dropzoneOverlayStyle}>\r\n            You can also Drop Files Here\r\n            </div>)}\r\n            </Dropzone>\r\n            </Box>\r\n            </FormGroup>\r\n            <ListGroup >\r\n               <Text fontSize=\"xl\">Attachments:</Text>\r\n               <Box marginTop=\"10px\" >\r\n            {attachments.map((file, index) => (\r\n              <Text as=\"ins\" marginTop=\"3px\" >\r\n              <ListGroupItem  key={index} listItem={true}>\r\n                {file.name} ({filesize(file.size)})\r\n                <Button\r\n                  onClick={() => removeAttachment(file)}\r\n                  className='btn-link badge close'\r\n                >\r\n                  &times;\r\n                </Button>\r\n              </ListGroupItem>\r\n               </Text>\r\n            )\r\n           \r\n            )}\r\n            </Box>\r\n          </ListGroup>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n            <Button variantColor='blue' mr={3}  variant=\"outline\" onClick={() => {\r\n              dropzoneRef.open()\r\n            }}>\r\n              Attach Files\r\n            </Button>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReplyModel;\r\n\r\nReplyModel.prototype = {\r\n  replayData: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment,useState } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArrowForward } from \"react-icons/md\";\r\nimport { getHeader } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n  Box,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport {FormGroup,ListGroup,ListGroupItem} from \"react-bootstrap\";\r\nimport Dropzone from 'react-dropzone';\r\n\r\nimport filesize from 'filesize'\r\n\r\n\r\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\r\n  const [attachments,setattachments] = useState([]);\r\n  const [dropzoneActive,setdropzoneActive] = useState(false);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    \r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      \r\n      getMessageBody(forwardData.payload),\r\n     \r\n      displayToast,\r\n      \r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    console.log(attachments);\r\n    let email = [\r\n      'Content-Type: multipart/mixed; boundary=\"my_boundary\"',\r\n      'MIME-Version: 1.0'\r\n    ];\r\n    for (let h in headers_obj) {\r\n      console.log(headers_obj);\r\n      email.push(`${h}: ${headers_obj[h]}`)\r\n    }\r\n\r\n    email.push(\r\n      '',\r\n      '--my_boundary'\r\n    );\r\n\r\n    if(!/^\\s*$/.test(message)) {\r\n      email.push(\r\n        'Content-Type: text/html; charset=\"UTF-8\"',\r\n        'MIME-Version: 1.0',\r\n        'Content-Transfer-Encoding: 7bit',\r\n        '',\r\n        `${message}`,\r\n        '',\r\n        '--my_boundary'\r\n      )\r\n    }\r\n\r\n    if (attachments.length > 0) {\r\n      for (let i = 0; i < attachments.length; i++) {\r\n        email.push(\r\n          `Content-Type: ${attachments[i].type}`,\r\n          'MIME-Version: 1.0',\r\n          'Content-Transfer-Encoding: base64',\r\n          `Content-Disposition: attachment; filename=\"${attachments[i].name}\"`,\r\n          '',\r\n          btoa(attachments[i].blob),\r\n          '',\r\n          '--my_boundary'\r\n        )\r\n      }\r\n    }\r\n\r\n    const encode = (s) => btoa(unescape(encodeURIComponent(s))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n\r\n    email = encode(email.join('\\r\\n') + '--');\r\n\r\n    \r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: email,\r\n      },\r\n    });\r\n    setattachments([]);\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  var onDrop = (files) => {\r\n    setdropzoneActive({dropzoneActive: false});\r\n    for (let i = 0; i < files.length; i++) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setattachments((attachments) => \r\n          [\r\n            ...attachments,\r\n            {\r\n              name: files[i].name,\r\n              size: files[i].size,\r\n              type: files[i].type,\r\n              blob: reader.result\r\n            }\r\n          ]\r\n        )\r\n      };\r\n      reader.readAsBinaryString(files[i]);\r\n    }\r\n  }\r\n  var removeAttachment =(file) => {\r\n    setattachments(\r\n      attachments.filter(item => item !== file)\r\n    )\r\n  }\r\n  var dropzoneRef;\r\n\r\n  const dropzoneOverlayStyle = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    padding: '2.5em 0',\r\n    \r\n    textAlign: 'center',\r\n    \r\n  };\r\n\r\n  const getForwardHead = (headers) => {\r\n    let msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\r\n    return msg;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdArrowForward}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n       Forward\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='full'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Reply Email </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n            <FormControl isRequired>\r\n                <Input\r\n                  marginTop=\"10px\"\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                   marginTop=\"10px\"\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={getHeader(forwardData.payload.headers, \"Subject\")}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              \r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                  value={\r\n                    \"------Forward Message------\\r\\n\" +\r\n                    getForwardHead(forwardData.payload.headers)\r\n                  }\r\n                  readOnly\r\n\r\n                />\r\n              </FormControl>\r\n              <FormGroup>\r\n                <Box >\r\n              <Dropzone\r\n\r\n              disableClick\r\n              style={{position: \"relative\"}}\r\n              onDrop={onDrop}\r\n              onDragEnter={() => setdropzoneActive({dropzoneActive: true})}\r\n              onDragLeave={() => setdropzoneActive({dropzoneActive: false})}\r\n              ref={(node) => {\r\n                dropzoneRef = node;\r\n              }}\r\n            > \r\n             {attachments.length>0? (\"\"):(<div style={dropzoneOverlayStyle}>\r\n            You can also Drop Files Here\r\n            </div>)}\r\n            </Dropzone>\r\n            </Box>\r\n            </FormGroup>\r\n            <ListGroup >\r\n               <Text fontSize=\"xl\">Attachments:</Text>\r\n               <Box marginTop=\"10px\" >\r\n            {attachments.map((file, index) => (\r\n              <Text as=\"ins\" marginTop=\"3px\" >\r\n              <ListGroupItem  key={index} listItem={true}>\r\n                {file.name} ({filesize(file.size)})\r\n                <Button\r\n                  onClick={() => removeAttachment(file)}\r\n                  className='btn-link badge close'\r\n                >\r\n                  &times;\r\n                </Button>\r\n              </ListGroupItem>\r\n               </Text>\r\n            )\r\n           \r\n            )}\r\n            </Box>\r\n          </ListGroup>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n            <Button variantColor='blue' mr={3}  variant=\"outline\" onClick={() => {\r\n              dropzoneRef.open()\r\n            }}>\r\n              Attach Files\r\n            </Button>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ForwardModel;\r\n\r\nForwardModel.prototype = {\r\n  forwardData: PropTypes.object.isRequired,\r\n  getMessageBody: PropTypes.func.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport ReplyModel from \"./ReplyModel\";\r\nimport ForwardModel from \"./ForwardModel\";\r\nimport { getHeader, isEmpty, removeQuote, formatDate } from \"../Helper\";\r\nimport { MdArchive } from \"react-icons/md\";\r\nimport { Base64 } from \"js-base64\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  AspectRatioBox,\r\n  Avatar,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/core\";\r\nimport filesize from 'filesize'\r\nimport {ButtonGroup} from 'react-bootstrap';\r\nimport {saveAs} from 'file-saver';\r\nimport { Icon } from \"@chakra-ui/core\";\r\n\r\n\r\nconst Email = ({ message }) => {\r\n  const headers = isEmpty(message) ? [] : message.payload.headers;\r\n  const toast = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (!isEmpty(message)) {\r\n      addToFrame(message);\r\n    \r\n    }\r\n    // eslint-disable-next-line\r\n  }, [message]);\r\n\r\n  const formatReplayData = (headers) => {\r\n    const replayTo =\r\n      getHeader(headers, \"Reply-to\") !== undefined\r\n        ? getHeader(headers, \"Reply-to\")\r\n        : getHeader(headers, \"From\");\r\n    const replaySubject = getHeader(headers, \"Subject\");\r\n    const replayMsgId = getHeader(headers, \"Message-ID\");\r\n\r\n    return {\r\n      to: `${replayTo}`,\r\n      subject: `Re: ${replaySubject}`,\r\n      msgId: `${replayMsgId}`,\r\n    };\r\n  };\r\n\r\n  const handleTrashBtn = (userId, messageId) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .trash({\r\n        userId: userId,\r\n        id: messageId,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 200) {\r\n          toast({\r\n            title: \"Message Deleted\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Delete Message.\",\r\n          status: \"warning\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleArchiveBtn = (ids, labelIds) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .batchModify({\r\n        userId: \"me\",\r\n        resource: {\r\n          ids: ids,\r\n          removeLabelIds: labelIds,\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 204) {\r\n          toast({\r\n            title: \"Message Archived\",\r\n            description: \"The Message is now in archive category.\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Archive Message.\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const addToFrame = (message) => {\r\n    let ifrm = document.getElementById(\"iframe\").contentWindow.document;\r\n   // let ifrm1 = document.getElementById(\"iframe1\").contentWindow.document;\r\n   ifrm.body.innerHTML = getMessageBody(message.payload);\r\n   // ifrm1.body.innerHTML = getAttachments(message.payload);\r\n  };\r\n \r\n  const getAttachments = (message) => {\r\n    let attachments = [];\r\n    if (typeof message.payload.parts !== 'undefined') {\r\n      for (let i = 0; i < message.payload.parts.length; i++) {\r\n        const part = message.payload.parts[i];\r\n        if (typeof part.body.attachmentId !== 'undefined') {\r\n          attachments.push(part);  \r\n        }\r\n      }\r\n    }\r\n    return attachments;\r\n  };\r\n  \r\n  const getMessageBody = (message) => {\r\n    \r\n    const encodedBody =\r\n      typeof message.parts === \"undefined\"\r\n        ? message.body.data\r\n        : getHTMLPart(message.parts);\r\n\r\n    return Base64.decode(encodedBody);\r\n  };\r\n\r\n  const getHTMLPart = (arr) => {\r\n  let htmlPart = '';\r\n  let plainPart = '';\r\n  for (let x = 0; x < arr.length; x++) {\r\n    if (typeof arr[x].parts === 'undefined') {\r\n      if (arr[x].mimeType === 'text/html') {\r\n        htmlPart = arr[x].body.data;\r\n      } else if (arr[x].mimeType === 'text/plain') {\r\n        plainPart = arr[x].body.data;\r\n      }\r\n    } else {\r\n      return getHTMLPart(arr[x].parts);\r\n    }\r\n  }\r\n  return htmlPart !== '' ? htmlPart : plainPart;\r\n};\r\n\r\nconst downloadAttachment = (messageId,part) =>{\r\n  window.gapi.client.gmail.users.messages.attachments.get({\r\n    userId: 'me',\r\n    messageId,\r\n    id: part.body.attachmentId\r\n  }).execute((response) => {\r\n    let byteString = atob(response.data.replace(/-/g, '+').replace(/_/g, '/'));\r\n\r\n    let ab = new ArrayBuffer(byteString.length);\r\n    let ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    let blob = new Blob([ia], {type: part.mimeType});\r\n\r\n    saveAs(blob, part.filename);\r\n  })\r\n};\r\n\r\n\r\n\r\n \r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='58%'\r\n     \r\n     \r\n      h='100%'\r\n      p='0.6rem 1rem'\r\n      bg='white'\r\n      color='black'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopRightRadius='md'\r\n      borderBottomRightRadius='md'\r\n    >\r\n      {!isEmpty(message) && (\r\n        <Fragment>\r\n          {/* Header Buttons */}\r\n          <Flex justify='space-around' wrap='no-wrap' mb={2}>\r\n            <ReplyModel replayData={formatReplayData(headers)} />\r\n            <ForwardModel\r\n              forwardData={message}\r\n              getMessageBody={getMessageBody}\r\n              getAttachments={getAttachments}\r\n            />\r\n            <Button\r\n              rightIcon={MdArchive}\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\r\n            >\r\n              Archive\r\n            </Button>\r\n            <Button\r\n              rightIcon='delete'\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleTrashBtn(\"me\", message.id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Flex>\r\n\r\n          {/* Mail Container */}\r\n          <Flex\r\n            className='mailContainer'\r\n            flexGrow='2'\r\n            direction='column'\r\n            wrap='wrap'\r\n            p={2}\r\n          >\r\n            <Box wordBreak=\"break-word\" className='mailHeader' mb={2}>\r\n              <Text  fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\r\n                {getHeader(headers, \"Subject\")}\r\n              </Text>\r\n              <Flex wrap='wrap' justify='flex-start'>\r\n                <Avatar\r\n                  name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\r\n                  src='https://bit.ly/tioluwani-kolawole'\r\n                  mr={4}\r\n                />\r\n                <Box w='80%'>\r\n                  <Text fontSize='md' color='gray.700'>\r\n                    {getHeader(headers, \"From\")}\r\n                  </Text>\r\n                  <Text fontSize='sm' color='gray.500'>\r\n                    {formatDate(getHeader(headers, \"Date\"))}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n              <Text fontSize='sm' color='gray.700' mt={1}>\r\n                {`To: ${getHeader(headers, \"To\")}`}\r\n              </Text>\r\n            </Box>\r\n            <Box className='mailBody' flexGrow='2'>\r\n              <AspectRatioBox ratio={16 / 9} h='100%'>\r\n                <Box as='iframe' id='iframe' title='messageBody'>\r\n                  <p>Your browser does not support iframes.</p>\r\n                </Box>\r\n              </AspectRatioBox>\r\n            </Box>\r\n          </Flex>\r\n          {!isEmpty(message)}\r\n          \r\n          \r\n          <Box\r\n          marginBottom=\"50px\"\r\n      bg='white'\r\n      color='black'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopRightRadius='md'\r\n      borderBottomRightRadius='md'> \r\n              {message.payload.parts && message.payload.parts.length > 0 ?  \r\n                \r\n                message.payload.parts.length?  ( \r\n                  <Text fontSize=\"xl\"> \r\n                    <ButtonGroup vertical>\r\n                      {message.payload.parts.slice(1).map((part, index) => (\r\n                        \r\n                        part.filename ? (\r\n                            <Button  \r\n                            rightIcon='download'\r\n                            marginBottom=\"10px\"\r\n                            variantColor='blue'\r\n                            variant='outline'\r\n                          key={index}\r\n                          onClick={() => downloadAttachment(message.id, part)}\r\n                        > \r\n                           \r\n                         {part.filename}\r\n                          ({filesize(part.body.size)})\r\n                         \r\n                        </Button>)\r\n                        : null\r\n                      ))}\r\n                    </ButtonGroup>\r\n                    </Text>\r\n                        ) :\r\n                (\r\n                  null\r\n                )\r\n                     : (\"\")}\r\n                    \r\n        </Box>\r\n       \r\n        \r\n        </Fragment>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n\r\nEmail.prototype = {\r\n  message: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\n\r\nimport MailboxList from \"./Components/MailboxList/MailboxList\";\r\nimport EmailList from \"./Components/EmailList/EmailList\";\r\nimport Email from \"./Components/Email/Email\";\r\n\r\nimport {markMessageAsRead} from \"./Components/Helper\";\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\n\r\nvar a;\r\nconst App = () => {\r\n  // const [labels, setlabels] = useState([]); // Todo - sort labels dynamically\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState({});\r\n  const [mailLimit, setMailLimit] = useState(30);\r\n  const [categoryId,setcategoryId] = useState(\"INBOX\");\r\n  useEffect(() => {\r\n    window.gapi.load(\"client:auth2\", {\r\n      callback: () => {\r\n        // Handle gapi.client initialization.\r\n        window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\r\n        window.gapi.auth.authorize(\r\n          {\r\n            client_id: process.env.REACT_APP_CLIENT_ID,\r\n            scope: process.env.REACT_APP_SCOPES,\r\n            immediate: true,\r\n          },\r\n          handleAuthResult\r\n        );\r\n      },\r\n      onerror: function () {\r\n        // Handle loading error.\r\n        console.log(\"gapi.client failed to load!\");\r\n      },\r\n      timeout: 5000, // 5 seconds.\r\n      ontimeout: function () {\r\n        // Handle timeout.\r\n        console.log(\"gapi.client could not load in a timely manner!\");\r\n      },\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleAuthResult = (authResult) => {\r\n    if (authResult && !authResult.error) {\r\n      //console.log(\"Sign-in successful\");\r\n      hideAuthBtn();\r\n      loadClient();\r\n    } else {\r\n      console.error(\"handleAuthResult...\");\r\n      console.error(authResult);\r\n      displayAuthBtn();\r\n    }\r\n  };\r\n\r\n  const hideAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"none\";\r\n  };\r\n\r\n  const displayAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"block\";\r\n  };\r\n\r\n  const handleAuthClick = () => {\r\n    return window.gapi.auth.authorize(\r\n      {\r\n        client_id: process.env.REACT_APP_CLIENT_ID,\r\n        scope: process.env.REACT_APP_SCOPES,\r\n        immediate: false,\r\n      },\r\n      handleAuthResult\r\n    );\r\n  };\r\n  const handleSignout = () => {\r\n    var auth2 = window.gapi.auth2.getAuthInstance();\r\n    auth2.signOut().then(function () {\r\n      console.log('User signed out.');\r\n    });\r\n  }\r\n\r\n  const loadClient = () => {\r\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\r\n      (res) => {\r\n      //  console.log(\"gapi client loaded for API\");\r\n        getMessages();\r\n      },\r\n      (err) => {\r\n        console.error(\"Error loading window.gapi client for API\", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  // ----------- Functions to Get Data from Gmail Api ------------\r\n  const getMessages = (labelIds = \"INBOX\") => {\r\n    // Get List of 20 message's Id\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      labelIds: labelIds,\r\n      maxResults: mailLimit,\r\n     \r\n    });\r\n    if(categoryId != labelIds)\r\n    setMailLimit(30);\r\n    setcategoryId(labelIds); \r\n    setMessages([]);\r\n    // Send Id list to getMessagesData to get Message Data foreach Id\r\n    request.execute(getMessagesData);\r\n  };\r\n\r\n  const getMessagesData = (response) => {\r\n    const messages = response.result.messages ? response.result.messages : [];\r\n\r\n    messages.forEach((message) => {\r\n      window.gapi.client.gmail.users.messages\r\n        .get({\r\n          userId: \"me\",\r\n          id: message.id,\r\n         \r\n        })\r\n        .then(\r\n          (response) => {\r\n            setMessages((messages) => [...messages, response.result]);\r\n          },\r\n          (err) => {\r\n            console.error(\"getMessagesData error\", err);\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  const getMessagesQuery = (query) => {\r\n    // Get List of 20 message's Id\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      q:query\r\n    });\r\n\r\n\r\n    setMessages([]);\r\n\r\n    // Send Id list to getMessagesData to get Message Data foreach Id\r\n    request.execute(getMessagesData);\r\n  };\r\n\r\n  \r\n\r\n  const loadMore = () => {\r\n    setMailLimit(mailLimit+20);\r\n   \r\n    getMessages(categoryId);\r\n    \r\n    \r\n  }\r\n \r\n\r\n  const resetstate = () => {\r\n    setMailLimit(30);\r\n    console.log(\"it is reset\" +mailLimit);\r\n  }\r\n \r\n\r\n  const getOneMessage = (messageId) => {\r\n    window.gapi.client.gmail.users.messages\r\n      .get({\r\n        userId: \"me\",\r\n        id: messageId,\r\n      })\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.result);\r\n          markMessageAsRead(messageId);\r\n        },\r\n        (err) => {\r\n          console.error(\"getMessage error\", err);\r\n        }\r\n      );\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Fragment>\r\n      <ThemeProvider>\r\n        <CSSReset />\r\n        <Button\r\n          id='authBtn'\r\n          display='block'\r\n          variantColor='teal'\r\n          variant='outline'\r\n          onClick={handleAuthClick}\r\n        >\r\n          Authorize\r\n        </Button>\r\n        <Flex\r\n          h='100vh'\r\n          minH='600px'\r\n          justify='space-arround'\r\n          wrap='no-wrap'\r\n          p='1em'\r\n          bg='#e5f4f1'\r\n          color='white'\r\n        >\r\n          <MailboxList getMessages={getMessages} resetstate={resetstate} getMessagesQuery={getMessagesQuery} />\r\n          <EmailList getOneMessage={getOneMessage} loadMore={loadMore}  messages={messages} getMessagesQuery={getMessagesQuery}/>\r\n          <Email message={message} />\r\n          \r\n        </Flex>\r\n      </ThemeProvider>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}